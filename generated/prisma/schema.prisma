generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // Add this line
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model courses {
  id            Int           @id @default(autoincrement())
  title         String?       @db.VarChar(255)
  description   String?
  price         Decimal?      @db.Decimal(10, 2)
  provider_name String?       @db.VarChar(100)
  thumbnail_url String?
  preview_url   String?
  created_by    Int?
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  users         users?        @relation(fields: [created_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
  enrollments   enrollments[]
  modules       modules[]
  payments      payments[]
}

model enrollments {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  course_id   Int?
  enrolled_at DateTime? @default(now()) @db.Timestamp(6)
  paid        Boolean?  @default(false)
  courses     courses?  @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model modules {
  id        Int      @id @default(autoincrement())
  course_id Int?
  title     String?  @db.VarChar(255)
  position  Int?
  courses   courses? @relation(fields: [course_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  videos    videos[]
}

model payments {
  id           Int             @id @default(autoincrement())
  user_id      Int?
  course_id    Int?
  amount       Decimal?        @db.Decimal(10, 2)
  status       payment_status?
  payment_date DateTime?       @default(now()) @db.Timestamp(6)
  provider     String?         @db.VarChar(50)
  courses      courses?        @relation(fields: [course_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  users        users?          @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model users {
  id            Int           @id @default(autoincrement())
  name          String?       @db.VarChar(100)
  email         String?       @unique @db.VarChar(100)
  password_hash String?
  role          user_role?
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  courses       courses[]
  enrollments   enrollments[]
  payments      payments[]
}

model videos {
  id        Int      @id @default(autoincrement())
  module_id Int?
  title     String?  @db.VarChar(255)
  video_url String?
  position  Int?
  modules   modules? @relation(fields: [module_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

enum payment_status {
  success
  failed
  pending
}

enum user_role {
  admin
  learner
}
